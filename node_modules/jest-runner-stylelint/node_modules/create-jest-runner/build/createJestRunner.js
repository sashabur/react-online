'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Worker = require('jest-worker').default;

var CancelRun = function (_Error) {
  _inherits(CancelRun, _Error);

  function CancelRun(message) {
    _classCallCheck(this, CancelRun);

    var _this = _possibleConstructorReturn(this, (CancelRun.__proto__ || Object.getPrototypeOf(CancelRun)).call(this, message));

    _this.name = 'CancelRun';
    return _this;
  }

  return CancelRun;
}(Error);

var createRunner = function createRunner(runPath) {
  var BaseTestRunner = function () {
    function BaseTestRunner(globalConfig) {
      _classCallCheck(this, BaseTestRunner);

      this._globalConfig = globalConfig;
    }

    // eslint-disable-next-line


    _createClass(BaseTestRunner, [{
      key: 'runTests',
      value: function runTests(tests, watcher, onStart, onResult, onFailure, options) {
        var _this2 = this;

        var worker = new Worker(runPath, {
          exposedMethods: ['default'],
          numWorkers: this._globalConfig.maxWorkers,
          forkOptions: { stdio: 'inherit' }
        });

        var runTestInWorker = function runTestInWorker(test) {
          if (watcher.isInterrupted()) {
            throw new CancelRun();
          }

          return onStart(test).then(function () {
            var baseOptions = {
              config: test.context.config,
              globalConfig: _this2._globalConfig,
              testPath: test.path,
              rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null,
              options
            };

            return worker.default(baseOptions);
          });
        };

        var onError = function onError(err, test) {
          return onFailure(test, err).then(function () {
            if (err.type === 'ProcessTerminatedError') {
              // eslint-disable-next-line no-console
              console.error('A worker process has quit unexpectedly! ' + 'Most likely this is an initialization error.');
              process.exit(1);
            }
          });
        };

        var onInterrupt = new Promise(function (_, reject) {
          watcher.on('change', function (state) {
            if (state.interrupted) {
              reject(new CancelRun());
            }
          });
        });

        var runAllTests = Promise.all(tests.map(function (test) {
          return runTestInWorker(test).then(function (testResult) {
            return onResult(test, testResult);
          }).catch(function (error) {
            return onError(error, test);
          });
        }));

        var cleanup = function cleanup() {
          return worker.end();
        };

        return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
      }
    }]);

    return BaseTestRunner;
  }();

  return BaseTestRunner;
};

module.exports = createRunner;