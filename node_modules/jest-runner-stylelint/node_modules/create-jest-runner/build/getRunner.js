'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

require('core-js/modules/es6.typed.array-buffer');

require('core-js/modules/es6.typed.int8-array');

require('core-js/modules/es6.typed.uint8-array');

require('core-js/modules/es6.typed.uint8-clamped-array');

require('core-js/modules/es6.typed.int16-array');

require('core-js/modules/es6.typed.uint16-array');

require('core-js/modules/es6.typed.int32-array');

require('core-js/modules/es6.typed.uint32-array');

require('core-js/modules/es6.typed.float32-array');

require('core-js/modules/es6.typed.float64-array');

require('core-js/modules/es6.map');

require('core-js/modules/es6.set');

require('core-js/modules/es6.weak-map');

require('core-js/modules/es6.weak-set');

require('core-js/modules/es6.reflect.apply');

require('core-js/modules/es6.reflect.construct');

require('core-js/modules/es6.reflect.define-property');

require('core-js/modules/es6.reflect.delete-property');

require('core-js/modules/es6.reflect.get');

require('core-js/modules/es6.reflect.get-own-property-descriptor');

require('core-js/modules/es6.reflect.get-prototype-of');

require('core-js/modules/es6.reflect.has');

require('core-js/modules/es6.reflect.is-extensible');

require('core-js/modules/es6.reflect.own-keys');

require('core-js/modules/es6.reflect.prevent-extensions');

require('core-js/modules/es6.reflect.set');

require('core-js/modules/es6.reflect.set-prototype-of');

require('core-js/modules/es6.promise');

require('core-js/modules/es6.symbol');

require('core-js/modules/es6.function.name');

require('core-js/modules/es6.regexp.flags');

require('core-js/modules/es6.regexp.match');

require('core-js/modules/es6.regexp.replace');

require('core-js/modules/es6.regexp.split');

require('core-js/modules/es6.regexp.search');

require('core-js/modules/es6.array.from');

require('core-js/modules/es7.array.includes');

require('core-js/modules/es7.object.values');

require('core-js/modules/es7.object.entries');

require('core-js/modules/es7.object.get-own-property-descriptors');

require('core-js/modules/es7.string.pad-start');

require('core-js/modules/es7.string.pad-end');

require('regenerator-runtime/runtime');

var throat = require('throat');
var pify = require('pify');
var workerFarm = require('worker-farm');

var CancelRun = function (_Error) {
  _inherits(CancelRun, _Error);

  function CancelRun(message) {
    _classCallCheck(this, CancelRun);

    var _this = _possibleConstructorReturn(this, (CancelRun.__proto__ || Object.getPrototypeOf(CancelRun)).call(this, message));

    _this.name = 'CancelRun';
    return _this;
  }

  return CancelRun;
}(Error);

var getRunner = function getRunner(testWorkerPath, extraOptions) {
  var BaseTestRunner = function () {
    function BaseTestRunner(globalConfig) {
      _classCallCheck(this, BaseTestRunner);

      this._globalConfig = globalConfig;
    }

    // eslint-disable-next-line


    _createClass(BaseTestRunner, [{
      key: 'runTests',
      value: function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(tests, watcher, onStart, onResult, onFailure, options) {
          var _this2 = this;

          var farm, mutex, worker, runTestInWorker, onError, onInterrupt, runAllTests, cleanup;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  farm = workerFarm({
                    autoStart: true,
                    maxConcurrentCallsPerWorker: 1,
                    maxConcurrentWorkers: this._globalConfig.maxWorkers,
                    maxRetries: 2 // Allow for a couple of transient errors.
                  }, testWorkerPath);
                  mutex = throat(this._globalConfig.maxWorkers);
                  worker = pify(farm);

                  runTestInWorker = function runTestInWorker(test) {
                    return mutex(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                      var baseOptions;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (!watcher.isInterrupted()) {
                                _context.next = 2;
                                break;
                              }

                              throw new CancelRun();

                            case 2:
                              _context.next = 4;
                              return onStart(test);

                            case 4:
                              baseOptions = {
                                config: test.context.config,
                                globalConfig: _this2._globalConfig,
                                testPath: test.path,
                                rawModuleMap: watcher.isWatchMode() ? test.context.moduleMap.getRawModuleMap() : null,
                                options
                              };

                              if (!extraOptions) {
                                _context.next = 7;
                                break;
                              }

                              return _context.abrupt('return', Object.assign({}, baseOptions, extraOptions(baseOptions, tests)));

                            case 7:
                              return _context.abrupt('return', worker(baseOptions));

                            case 8:
                            case 'end':
                              return _context.stop();
                          }
                        }
                      }, _callee, _this2);
                    })));
                  };

                  onError = function () {
                    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(err, test) {
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return onFailure(test, err);

                            case 2:
                              if (err.type === 'ProcessTerminatedError') {
                                // eslint-disable-next-line no-console
                                console.error('A worker process has quit unexpectedly! ' + 'Most likely this is an initialization error.');
                                process.exit(1);
                              }

                            case 3:
                            case 'end':
                              return _context2.stop();
                          }
                        }
                      }, _callee2, _this2);
                    }));

                    return function onError(_x7, _x8) {
                      return _ref3.apply(this, arguments);
                    };
                  }();

                  onInterrupt = new Promise(function (_, reject) {
                    watcher.on('change', function (state) {
                      if (state.interrupted) {
                        reject(new CancelRun());
                      }
                    });
                  });
                  runAllTests = Promise.all(tests.map(function (test) {
                    return runTestInWorker(test).then(function (testResult) {
                      return onResult(test, testResult);
                    }).catch(function (error) {
                      return onError(error, test);
                    });
                  }));

                  cleanup = function cleanup() {
                    return workerFarm.end(farm);
                  };

                  return _context3.abrupt('return', Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup));

                case 9:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function runTests(_x, _x2, _x3, _x4, _x5, _x6) {
          return _ref.apply(this, arguments);
        }

        return runTests;
      }()
    }]);

    return BaseTestRunner;
  }();

  return BaseTestRunner;
};

module.exports = getRunner;